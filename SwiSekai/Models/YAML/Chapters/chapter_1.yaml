chapters:
  - chapterName: "Chapter 1: The Raw Elements"
    modules:
      - id: "B4A3D2C1-F0E9-4D8C-B7A6-9E8F7D6C5B4A"
        module_name: "Storing the Elements: Constants & Variables"
        module_number: 4
        multiple_choice:
          - question: "Which keyword is used for a 'Flowing Vial' whose contents are expected to change?"
            options:
              - "let"
              - "static"
              - "const"
              - "var"
            answer: "var"
          - question: "Which command correctly forges a 'Crystal Container' of the `String` element?"
            options:
              - 'var name: String = "Leo"'
              - 'let name = String("Leo")'
              - 'let name: String = "Leo"'
              - 'let name = "Leo" as String'
            answer: 'let name: String = "Leo"'
        content_blocks:
          - type: "heading1"
            content:
              text: "Containing the Elements of Creation"
          - type: "explanation"
            content:
              text: "Every creation is built from fundamental elements, or **data**. To use this data, you must store it. In SwiftCraft, you use two types of containers: Crystal Containers that seal their contents permanently, and Flowing Vials that allow their contents to be changed."
          - type: "heading2"
            content:
              text: "Crystal Containers with `let`"
          - type: "explanation"
            content:
              text: "When you have an element that must **never change**—like the name of a kingdom or the date it was founded—you store it in a **constant** using the keyword `let`. This forges a Crystal Container, sealing the value inside. It is a mark of a careful architect to use `let` whenever possible, ensuring stability in your creations."
          - type: "snippet"
            content:
              code: |
                // The number of suns in the sky is constant.
                let numberOfSuns = 1
                // The name of your guild is permanent.
                let guildName = "The Code Crafters"
          - type: "heading2"
            content:
              text: "Flowing Vials with `var`"
          - type: "explanation"
            content:
              text: "When an element needs to **change** as your creation operates—like a character's health or the amount of gold in a treasury—you store it in a **variable** using `var`. This creates a Flowing Vial, allowing you to alter its contents later."
          - type: "snippet"
            content:
              code: |
                // A character's health changes during battle.
                var playerHealth = 100
                playerHealth = 80 // Took some damage.
                // The number of members in your guild can grow.
                var memberCount = 50
                memberCount = 51 // A new member joined!

      - id: "8F8A7B6C-5D4E-4A3B-B2C1-D0E9F8A7B6C5"
        module_name: "The Four Core Elements"
        module_number: 5
        multiple_choice:
          - question: "Which elemental type would you use to store the name of a city?"
            options:
              - "Int"
              - "String"
              - "Double"
              - "Bool"
            answer: "String"
          - question: "What is the purpose of the `Bool` element?"
            options:
              - "To store liquid matter (decimal numbers)."
              - "To store text."
              - "To represent the duality of True and False."
              - "To store solid matter (whole numbers)."
            answer: "To represent the duality of True and False."
        content_blocks:
          - type: "heading1"
            content:
              text: "Understanding the Elements (Data Types)"
          - type: "explanation"
            content:
              text: "The language of Swift is precise. Every container (`let` or `var`) must hold a specific **type** of element. This prevents you from trying to add a word to a number, which would destabilize your creation. Let's learn the four core elements."
          - type: "heading2"
            content:
              text: "The Element of Text: `String`"
          - type: "explanation"
            content:
              text: 'A `String` is the element of language, used to store text. You create it by surrounding characters with double quotes `""`.'
          - type: "snippet"
            content:
              code: |
                let welcomeChant: String = "Speak friend and enter."
          - type: "heading2"
            content:
              text: "The Element of Solid Matter: `Int`"
          - type: "explanation"
            content:
              text: "An `Int` (short for integer) is the element of solid, countable things. It is used for whole numbers."
          - type: "snippet"
            content:
              code: |
                let population: Int = 5000
                let stepsToThePeak: Int = 1200
          - type: "heading2"
            content:
              text: "The Element of Liquid Matter: `Double`"
          - type: "explanation"
            content:
              text: "A `Double` is the element of flowing, measurable things that are not whole, like potion volumes or the precise weight of a gold coin."
          - type: "snippet"
            content:
              code: |
                let potionVolume: Double = 0.75
                let gravity: Double = 9.81
          - type: "heading2"
            content:
              text: "The Element of Duality: `Bool`"
          - type: "explanation"
            content:
              text: "A `Bool` (Boolean) is the element of truth and falsehood. It can only be `true` or `false`. It is the foundation of all logic and decision-making in your creations."
          - type: "snippet"
            content:
              code: |
                let isDoorOpen: Bool = false
                let hasKey: Bool = true
          - type: "heading2"
            content:
              text: "Automatic Element Detection (Type Inference)"
          - type: "explanation"
            content:
              text: "SwiftCraft is wise. When you create a container, it often knows the element type just by looking at the value you provide. This is **type inference**. If you need to be explicit, you can declare the type with a colon, which is **type annotation**."
          - type: "snippet"
            content:
              code: |
                let mountainName = "Cloudspire" // Swift infers this is a String
                var currentAltitude: Int = 1500  // This is an explicit type annotation

      - id: "E9F8A7B6-C5D4-4A3B-B2C1-D0E9F8A7B6C5"
        module_name: "Binding Runes: Operators"
        module_number: 6
        multiple_choice:
          - question: "What is the value of `result` after this command sequence? `let result = 10 + 5 * 2`"
            options:
              - "30"
              - "20"
              - "25"
              - "17"
            answer: "20"
          - question: "Which rune finds the residual energy from a division?"
            options:
              - "/"
              - "*"
              - "%"
              - "!"
            answer: "%"
        content_blocks:
          - type: "heading1"
            content:
              text: "Manipulating the Elements: Operators"
          - type: "explanation"
            content:
              text: "Storing elements is the first step. To build, you must shape and combine them. **Operators** are the binding runes you use to perform actions on your data."
          - type: "heading2"
            content:
              text: "Arithmetic Runes"
          - type: "explanation"
            content:
              text: "These are the fundamental runes of calculation: `+` (combine), `-` (reduce), `*` (multiply), and `/` (divide). The ancient laws of mathematics are obeyed here!"
          - type: "snippet"
            content:
              code: |
                let combinedForce = 10 + 5        // 15
                let remainingEnergy = 20 - 8      // 12
          - type: "heading2"
            content:
              text: "The Remainder Rune"
          - type: "explanation"
            content:
              text: "The remainder rune (`%`) is a rune of subtlety. It tells you what is left over after a division. It is invaluable for patterns, like determining if a number is even or odd (if `number % 2` leaves 0, it is even)."
          - type: "snippet"
            content:
              code: |
                let leftoverCoins = 9 % 4 // result is 1. If 9 coins are shared among 4 people, 1 is left over.
          - type: "heading2"
            content:
              text: "Compound Runes"
          - type: "explanation"
            content:
              text: "A skilled architect is efficient. Compound runes combine an action and a reassignment in one motion. `score += 5` is a more concise way of commanding `score = score + 5`."
          - type: "snippet"
            content:
              code: |
                var score = 100
                score += 5 // score is now 105
      - id: "A0B1C2D3-E4F5-4A6B-B7C8-D9E0F1A2B3C4"
        module_name: "Weaving Words of Power"
        module_number: 7
        multiple_choice:
          - question: "How do you weave the containers `firstName` and `lastName` into a single line of text with a space?"
            options:
              - "`\"\\(firstName) \\(lastName)\"`"
              - "`firstName...lastName`"
              - "`firstName.add(lastName)`"
              - '`"firstName" + "lastName"`'
            answer: "`\"\\(firstName) \\(lastName)\"`"
          - question: "Which syntax is used to create a multi-line inscription?"
            options:
              - "`'...'`"
              - '`"""..."""`'
              - "`<string>...</string>`"
              - "`//...`"
            answer: '`"""..."""`'
        content_blocks:
          - type: "heading1"
            content:
              text: "The Art of Inscription: Strings"
          - type: "explanation"
            content:
              text: "The `String` element is your tool for all written communication in your creations. Let's learn the art of weaving complex messages."
          - type: "heading2"
            content:
              text: "Weaving (String Interpolation)"
          - type: "explanation"
            content:
              text: "This is the most elegant technique. It allows you to weave the contents of your containers directly into a line of text. Enclose the container's name in `\\(...)` and it will be replaced by its value. This is the preferred method in SwiftCraft."
          - type: "snippet"
            content:
              code: |
                let heroName = "Elara"
                var level = 5
                let announcement = "All hail \\(heroName), who has reached level \\(level)!"
          - type: "heading2"
            content:
              text: "Chaining (Concatenation)"
          - type: "explanation"
            content:
              text: "You can also chain strings together end-to-end using the `+` rune."
          - type: "snippet"
            content:
              code: |
                let part1 = "The dragon "
                let part2 = "sleeps."
                let warning = part1 + part2 // warning is "The dragon sleeps."
          - type: "heading2"
            content:
              text: "Grand Inscriptions"
          - type: "explanation"
            content:
              text: 'For long inscriptions that span multiple lines, use three double quotation marks (`"""`).'
          - type: "snippet"
            content:
              code: |
                let prophecy = """
                When the twin moons align,
                a hero will rise from the code,
                and a new era shall begin.
                """
      - id: "D1E2F3A4-B5C6-4D7E-B8F9-A0B1C2D3E4F5"
        module_name: "The Rhythm of Creation: Loops"
        module_number: 8
        multiple_choice:
          - question: "How many times will a command inside a loop with the range `1..<5` be executed?"
            options:
              - "3"
              - "4"
              - "5"
              - "6"
            answer: "4"
          - question: "Which command would correctly greet every hero in the `heroes` list?"
            options:
              - "`for i in heroes { print(hero) }`"
              - "`for hero in heroes { print(hero) }`"
              - "`for hero in 1...heroes.count { print(hero) }`"
              - "`loop hero in heroes { print(hero) }`"
            answer: "`for hero in heroes { print(hero) }`"
        content_blocks:
          - type: "heading1"
            content:
              text: "Automating with For-In Loops"
          - type: "explanation"
            content:
              text: "A Master Architect does not perform the same task a hundred times. They create a rhythm, a loop, that performs the task for them. The **`for-in`** loop is your tool for automation and repetition."
          - type: "heading2"
            content:
              text: "Looping Through Number Ranges"
          - type: "explanation"
            content:
              text: "You can command a loop to run for a specific range of numbers. The **closed range operator** (`...`) includes the final number. The **half-open range operator** (`..<`) goes up to but *does not include* the final number."
          - type: "snippet"
            content:
              code: |
                // Closed range (rings 3 times for 1, 2, 3)
                for i in 1...3 {
                    print("The great bell rings for the \\(i) time.")
                }
                // Half-open range (rings 2 times for 1, 2)
                for i in 1..<3 {
                    print("The warning horn sounds \\(i) time(s).")
                }
          - type: "heading2"
            content:
              text: "Looping Through Collections"
          - type: "explanation"
            content:
              text: "The true power of loops is revealed when you use them on a collection of items. In the next chapter, we will learn about these collections in detail. For now, know that if you have a list of items, a loop can perform an action on each one, in order."
          - type: "snippet"
            content:
              code: |
                let quests = ["Find the Lost Sword", "Defeat the Goblin King", "Light the Beacon"]
                for quest in quests {
                    print("New quest added: \\(quest)!")
                }
    finalReview:
      content_blocks:
        - type: "heading1"
          content:
            text: "Chapter 1 Review: Command of the Elements"
        - type: "explanation"
          content:
            text: "You have taken your first true steps as an architect. You now understand and can command the raw elements of SwiftCraft. This is the foundation upon which all great creations are built."
        - type: "heading2"
          content:
            text: "Arts You Have Mastered"
        - type: "explanation"
          content:
            text: "**Storing Elements:** You can use `let` to create stable Crystal Containers and `var` to create mutable Flowing Vials."
        - type: "explanation"
          content:
            text: "**The Core Elements:** You can identify and wield the four core elements: `String` (Text), `Int` (Solid Matter), `Double` (Liquid Matter), and `Bool` (Duality)."
        - type: "explanation"
          content:
            text: "**Binding Runes:** You can use operators to manipulate data and `String Interpolation` to elegantly weave text."
        - type: "explanation"
          content:
            text: "**The Rhythm of Creation:** You can use `for-in` loops to automate repetitive tasks, the first step towards building complex and efficient creations."
