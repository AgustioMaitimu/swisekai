projects:
  - id: "E621E1F8-C36C-495A-93FC-0C247A3E6E5F"
    project_name: "Player Score Tracker"
    project_description: "Build a simple score tracker for a game. You'll learn the fundamental concept of storing data that can change (the score) and data that stays the same (the player's name)."
    project_difficulty: "Easy"
    level_prerequisite: 1
    content_blocks:
      - type: "heading1"
        content:
          text: "Player Score Tracker"
      - type: "heading2"
        content:
          text: "Project Overview"
      - type: "explanation"
        content:
          text: "This project practices the core skill of storing data. You'll use a **constant** (`let`) for a value that won't change (the player's name) and a **variable** (`var`) for a value that will (the player's score)."
      - type: "heading2"
        content:
          text: "Core Concepts"
      - type: "explanation"
        content:
          text: "This project is based on **Module 1: Storing Data**. We will use `let` to declare a constant and `var` to declare a variable. We will also add **explicit type annotations** (e.g., `: String`) to be clear about the kind of data we are storing, even though Swift could figure it out through **type inference**."
      - type: "heading2"
        content:
          text: "Implementation"
      - type: "snippet"
        content:
          code: |
            // Use 'let' for a value that never changes.
            // We also add a type annotation `: String` for clarity.
            let playerName: String = "Cyber-Cat"

            // Use 'var' for a value that is expected to change.
            // Swift can infer this is an Int, but we'll be explicit.
            var currentScore: Int = 0
            print("Welcome, \(playerName)! Your score is \(currentScore).")

            // The player gains points, so we update the variable.
            currentScore = 150
            print("\(playerName) scored! New score is \(currentScore).")
      - type: "heading2"
        content:
          text: "Next Steps"
      - type: "explanation"
        content:
          text: "Add a new constant called `highScoreGoal` of type `Int` and set it to 1000. After the player scores, print a message showing how many more points they need to reach the goal."

  - id: "0C8D23A7-522A-44C3-A33B-32825B3E144C"
    project_name: "Simple Tip Calculator"
    project_description: "Create a program to calculate the tip and total for a restaurant bill. This will teach you how to perform basic math operations in your code."
    project_difficulty: "Easy"
    level_prerequisite: 2
    content_blocks:
      - type: "heading1"
        content:
          text: "Simple Tip Calculator"
      - type: "heading2"
        content:
          text: "Project Overview"
      - type: "explanation"
        content:
          text: "This project lets you practice using mathematical operators to perform calculations, a fundamental task in programming."
      - type: "heading2"
        content:
          text: "Core Concepts"
      - type: "explanation"
        content:
          text: "Based on **Module 2: Basic Operators**, this project uses standard **arithmetic operators** like multiplication (`*`) and addition (`+`). You will also use a **compound assignment operator** (`+=`) as a convenient shortcut to modify a variable."
      - type: "heading2"
        content:
          text: "Implementation"
      - type: "snippet"
        content:
          code: |
            let billAmount = 58.50
            let tipPercentage = 0.20 // 20% tip

            // Use the multiplication operator '*' to calculate the tip.
            let tipAmount = billAmount * tipPercentage

            // Start with the bill amount.
            var totalBill = billAmount

            // Use the compound assignment operator '+=' to add the tip.
            // This is a shortcut for: totalBill = totalBill + tipAmount
            totalBill += tipAmount

            print("Bill: $\(billAmount)")
            print("Tip: $\(tipAmount)")
            print("Total: $\(totalBill)")
      - type: "heading2"
        content:
          text: "Next Steps"
      - type: "explanation"
        content:
          text: "Use the **remainder operator** (`%`) to determine if a number is even or odd. Create a variable `numberOfDiners` and check if it's an even number before printing a message about splitting the bill."

  - id: "DA8A2B6C-6246-4482-A4A6-18CB39851B24"
    project_name: "Greeting Card Generator"
    project_description: "Make a personalized greeting message by combining text with variables. You'll learn how to create dynamic strings for any occasion."
    project_difficulty: "Easy"
    level_prerequisite: 3
    content_blocks:
      - type: "heading1"
        content:
          text: "Greeting Card Generator"
      - type: "heading2"
        content:
          text: "Project Overview"
      - type: "explanation"
        content:
          text: "This project demonstrates the different ways to build strings in Swift, which is essential for displaying any kind of text to a user."
      - type: "heading2"
        content:
          text: "Core Concepts"
      - type: "explanation"
        content:
          text: "From **Module 3: Working with Text**, this project uses **string interpolation** `\\(...)` to easily embed variables inside a string. You will also use **multi-line strings** (`\"\"\"`) for creating text that spans several lines."
      - type: "heading2"
        content:
          text: "Implementation"
      - type: "snippet"
        content:
          code: |
            let recipientName = "Alex"
            let event = "Graduation"

            // Use string interpolation to build a dynamic message.
            let message = "Congratulations on your \(event), \(recipientName)!"
            print(message)

            // Use multi-line strings for longer, formatted text.
            let longerMessage = """
            It's been a long journey,
            and you've worked so hard.

            We are all incredibly proud of you!

            - The Swift Team
            """
            print(longerMessage)
      - type: "heading2"
        content:
          text: "Next Steps"
      - type: "explanation"
        content:
          text: "Create two string constants, `part1` and `part2`. Join them together using the addition operator `+` (concatenation) and store the result in a new constant called `fullQuote`."

  - id: "4F1B3E3D-4A2D-4B9A-8C3D-1B9E0F7B5D9E"
    project_name: "Smart Thermostat"
    project_description: "Build the logic for a smart thermostat that provides a message based on the current temperature. This project introduces how to make decisions in code."
    project_difficulty: "Easy"
    level_prerequisite: 7
    content_blocks:
      - type: "heading1"
        content:
          text: "Smart Thermostat"
      - type: "heading2"
        content:
          text: "Project Overview"
      - type: "explanation"
        content:
          text: "This project simulates the decision-making logic of a device. You will write code that follows different paths depending on the conditions it checks."
      - type: "heading2"
        content:
          text: "Core Concepts"
      - type: "explanation"
        content:
          text: "Based on **Module 7: Conditionals**, this project uses `if`, `else if`, and `else` to create conditional logic. You'll use **comparison operators** like `<` (less than) and the **logical AND operator** (`&&`) to check if multiple conditions are true at the same time."
      - type: "heading2"
        content:
          text: "Implementation"
      - type: "snippet"
        content:
          code: |
            let currentTempCelsius = 18
            let isWindowOpen = false

            if currentTempCelsius < 15 {
              print("It's chilly. Turning on the heat.")
            } else if currentTempCelsius > 15 && isWindowOpen == true {
              print("It's pleasant, but the window is open! Pausing climate control.")
            } else if currentTempCelsius > 25 {
              print("It's hot! Turning on the AC.")
            } else {
              print("Temperature is perfect. Maintaining settings.")
            }
      - type: "heading2"
        content:
          text: "Next Steps"
      - type: "explanation"
        content:
          text: "Add another boolean variable called `isHome`. Modify the logic so that the heat or AC only turn on if `isHome` is true."

  - id: "9B6A1E3D-5F7C-4C6E-9B8A-1E3D5F7C9B6A"
    project_name: "To-Do List Manager"
    project_description: "Create and display a list of tasks. This project teaches you how to manage collections of items and perform an action for each one."
    project_difficulty: "Medium"
    level_prerequisite: 5
    content_blocks:
      - type: "heading1"
        content:
          text: "To-Do List Manager"
      - type: "heading2"
        content:
          text: "Project Overview"
      - type: "explanation"
        content:
          text: "This project shows you how to manage an ordered list of items. You'll create a list, add items, remove items, and check its contents, which are common tasks in app development."
      - type: "heading2"
        content:
          text: "Core Concepts"
      - type: "explanation"
        content:
          text: "From **Module 5: Arrays**, this project demonstrates how to create an **Array**, add elements with `.append()`, remove them with `.remove(at:)`, and check the number of items with `.count`."
      - type: "heading2"
        content:
          text: "Implementation"
      - type: "snippet"
        content:
          code: |
            // Start with an empty array of Strings.
            var todoList: [String] = []
            print("You have \(todoList.count) tasks.")

            // Use .append() to add new items to the end.
            todoList.append("Finish report")
            todoList.append("Buy groceries")
            todoList.append("Call the dentist")
            print("Your tasks: \(todoList)")

            // Use .remove(at:) to remove an item at a specific index.
            // Remember, indices start at 0!
            todoList.remove(at: 1) // Removes "Buy groceries"
            print("Groceries bought! Remaining tasks: \(todoList)")
      - type: "heading2"
        content:
          text: "Next Steps"
      - type: "explanation"
        content:
          text: "After removing the item, use a `for-in` loop (from Module 4) to print each of the remaining tasks on a new line."

  - id: "D4C4B5A6-9876-4321-ABCD-FE9876543210"
    project_name: "User Profile Creator"
    project_description: "Store and retrieve user information like name, email, and city. You'll learn to use Dictionaries, which are perfect for storing associated data."
    project_difficulty: "Medium"
    level_prerequisite: 6
    content_blocks:
      - type: "heading1"
        content:
          text: "User Profile Creator"
      - type: "heading2"
        content:
          text: "Project Overview"
      - type: "explanation"
        content:
          text: "This project involves creating a user profile using a data structure that stores information with labels, which is ideal for unordered but descriptive data."
      - type: "heading2"
        content:
          text: "Core Concepts"
      - type: "explanation"
        content:
          text: "Based on **Module 6: Dictionaries**, you'll create a **Dictionary** with `String` keys and `String` values. You'll practice adding, updating, and removing values by referencing their unique keys. Accessing a dictionary key returns an optional, because the key might not exist."
      - type: "heading2"
        content:
          text: "Implementation"
      - type: "snippet"
        content:
          code: |
            var userProfile: [String: String] = [
              "username": "CodeMaster",
              "status": "Online"
            ]

            // Add a new key-value pair.
            userProfile["email"] = "codemaster@swift.dev"

            // Update an existing value using its key.
            userProfile["status"] = "Away"

            // Accessing a value returns an optional.
            print("Username: \(userProfile["username"] ?? "N/A")")

            // Remove a key-value pair by setting its value to nil.
            userProfile["status"] = nil
            print("Profile Data: \(userProfile)")
      - type: "heading2"
        content:
          text: "Next Steps"
      - type: "explanation"
        content:
          text: "Try creating a dictionary where the values are `Int` instead of `String`, like `var userStats: [String: Int]`. Add keys for `gamesPlayed` and `score`."

  - id: "1E3D5F7C-9B6A-4C6E-9B8A-1E3D5F7C9B6A"
    project_name: "Unit Converter"
    project_description: "Build a set of reusable tools to convert between different units (like miles to kilometers). This project introduces the power of functions to organize code."
    project_difficulty: "Medium"
    level_prerequisite: 9
    content_blocks:
      - type: "heading1"
        content:
          text: "Unit Converter"
      - type: "heading2"
        content:
          text: "Project Overview"
      - type: "explanation"
        content:
          text: "This project focuses on writing clean, reusable code by packaging logic into named blocks that you can call whenever you need them."
      - type: "heading2"
        content:
          text: "Core Concepts"
      - type: "explanation"
        content:
          text: "Following **Module 9: Functions**, you will write a **function** using the `func` keyword. The function will accept an input value (a **parameter**) and, after performing its calculation, send back an output (a **return value**)."
      - type: "heading2"
        content:
          text: "Implementation"
      - type: "snippet"
        content:
          code: |
            // A function with one Double parameter that returns a Double.
            func milesToKilometers(miles: Double) -> Double {
              let conversionRate = 1.60934
              return miles * conversionRate
            }

            // A function that prints but does not return a value.
            func displayConversion(miles: Double) {
                let kilometers = milesToKilometers(miles: miles)
                print("\(miles) miles is equal to \(kilometers) kilometers.")
            }

            // Call the function to get the result.
            displayConversion(miles: 100.0)
            displayConversion(miles: 25.5)
      - type: "heading2"
        content:
          text: "Next Steps"
      - type: "explanation"
        content:
          text: "Write a new function called `kilometersToMiles` that takes kilometers as a parameter and returns the equivalent distance in miles. The conversion rate is `1 / 1.60934`."

  - id: "8C3D1B9E-0F7B-4A2D-4B9A-1B9E0F7B5D9E"
    project_name: "Book Catalog App"
    project_description: "Model a real-world object—a book—in your code. You'll create a custom data type that groups together a book's title, author, and page count."
    project_difficulty: "Medium"
    level_prerequisite: 12
    content_blocks:
      - type: "heading1"
        content:
          text: "Book Catalog App"
      - type: "heading2"
        content:
          text: "Project Overview"
      - type: "explanation"
        content:
          text: "This project teaches you how to create your own custom data types, allowing you to group related information into a clean, logical blueprint."
      - type: "heading2"
        content:
          text: "Core Concepts"
      - type: "explanation"
        content:
          text: "From **Module 12: Structures**, this project involves defining a **`struct`** blueprint. You'll define its **properties** (the data it holds). Then, you'll create an **instance** of that struct, which is a concrete object made from the blueprint, and access its properties using dot syntax."
      - type: "heading2"
        content:
          text: "Implementation"
      - type: "snippet"
        content:
          code: |
            // 1. Define the blueprint for a Book.
            struct Book {
              // These are the properties of the struct.
              let title: String
              let author: String
              let pageCount: Int
            }

            // 2. Create a concrete instance of the Book.
            // Swift provides a memberwise initializer automatically.
            let favoriteBook = Book(title: "The Hobbit", author: "J.R.R. Tolkien", pageCount: 310)

            // 3. Access the properties of the instance using dot syntax.
            print("My favorite book is '\(favoriteBook.title)' by \(favoriteBook.author).")
      - type: "heading2"
        content:
          text: "Next Steps"
      - type: "explanation"
        content:
          text: "Create another struct called `Author` with properties `name` and `country`. Then, change the `author` property in the `Book` struct to be of type `Author` instead of `String`."

  - id: "C3A8E0B3-3C7B-4F1A-9A8E-8B3C1A7F0A9E"
    project_name: "Traffic Light Simulator"
    project_description: "Simulate the behavior of a traffic light. This project shows how to define a set of distinct, related states (red, yellow, green) to make your code safer and more readable."
    project_difficulty: "Medium"
    level_prerequisite: 8
    content_blocks:
      - type: "heading1"
        content:
          text: "Traffic Light Simulator"
      - type: "heading2"
        content:
          text: "Project Overview"
      - type: "explanation"
        content:
          text: "This project demonstrates an alternative to `if/else` for handling different cases of a value. It's especially useful when you have a value that can be one of several distinct possibilities."
      - type: "heading2"
        content:
          text: "Core Concepts"
      - type: "explanation"
        content:
          text: "From **Module 8: Switch Statements**, this project uses a **`switch`** statement to check a value against multiple possible `case`s. Swift `switch` statements must be **exhaustive**, meaning every possible value must be handled, either with a specific case or a `default` case."
      - type: "heading2"
        content:
          text: "Implementation"
      - type: "snippet"
        content:
          code: |
            let httpStatusCode = 404
            var message = ""

            // Use a switch statement to check the value of httpStatusCode.
            switch httpStatusCode {
            case 200:
              message = "OK"
            case 404:
              message = "Not Found"
            case 500:
              message = "Internal Server Error"
            case 400...499: // You can also match against ranges.
              message = "Client Error"
            default:
              message = "Unknown Code"
            }
            print("Status: \(httpStatusCode), Message: \(message)")
      - type: "heading2"
        content:
          text: "Next Steps"
      - type: "explanation"
        content:
          text: "Create a `String` variable called `color` and set it to `\"green\"`. Write a `switch` statement that prints \"Go\" if the color is green, \"Stop\" if it's red, and \"Slow down\" for yellow."
