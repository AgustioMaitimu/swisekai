projects:
  - id: "E621E1F8-C36C-495A-93FC-0C247A3E6E5F"
    project_name: "Player Score Tracker"
    project_description: "Build a simple score tracker for a game. You'll learn the fundamental concept of storing data that can change (the score) and data that stays the same (the player's name)."
    project_difficulty: "Easy"
    level_prerequisite: 1
    content_blocks:
      - type: "heading1"
        content:
          text: "Player Score Tracker"
      - type: "heading2"
        content:
          text: "Project Overview"
      - type: "explanation"
        content:
          text: "In this project, you'll create a basic score tracking system for a game. This is a classic beginner project that teaches the difference between values that can change and values that should not. You'll use Swift's `var` for the score and `let` for the player's name."
      - type: "heading2"
        content:
          text: "Core Concepts"
      - type: "explanation"
        content:
          text: "To build our score tracker, we need to store values. We use **'variables'** for values that can change, like a player's score. We use **'constants'** for values that won't change, like a player's name. In Swift, this is done with the `var` and `let` keywords, respectively."
      - type: "heading2"
        content:
          text: "Implementation"
      - type: "snippet"
        content:
          code: |
            // A player's name is set once, so we use a constant.
            let playerName = "Cyber-Cat"
            print("Welcome, \(playerName)!")

            // The score will change, so it's a variable.
            var currentScore = 100
            print("Your starting score is: \(currentScore)")

            // The player finds a bonus item!
            currentScore = 150
            print("Your new score is: \(currentScore)")
      - type: "heading2"
        content:
          text: "Next Steps"
      - type: "explanation"
        content:
          text: "Try expanding this project. Can you add another player? Can you create a high score that only updates if the `currentScore` is greater than the `highScore`?"


  - id: "0C8D23A7-522A-44C3-A33B-32825B3E144C"
    project_name: "Simple Tip Calculator"
    project_description: "Create a program to calculate the tip and total for a restaurant bill. This will teach you how to perform basic math operations in your code."
    project_difficulty: "Easy"
    level_prerequisite: 1
    content_blocks:
      - type: "heading1"
        content:
          text: "Simple Tip Calculator"
      - type: "heading2"
        content:
          text: "Project Overview"
      - type: "explanation"
        content:
          text: "This project will walk you through creating a practical tool for calculating tips. You'll work with numbers and basic arithmetic operations, which are fundamental to almost every app."
      - type: "heading2"
        content:
          text: "Core Concepts"
      - type: "explanation"
        content:
          text: "Any useful app needs to perform calculations. Swift supports the standard arithmetic operators (+, -, *, /) for performing math. We can use these to build our tip calculator. We'll also use the modulo operator (%) to find remainders, which is useful for tasks like splitting a bill."
      - type: "heading2"
        content:
          text: "Implementation"
      - type: "snippet"
        content:
          code: |
            let billAmount = 58.50
            let tipPercentage = 0.20 // 20% tip

            let tipAmount = billAmount * tipPercentage
            let totalBill = billAmount + tipAmount

            print("Bill: $\(billAmount)")
            print("Tip: $\(tipAmount)")
            print("Total: $\(totalBill)")

            // How to split the bill between 2 people?
            let numberOfPeople = 2
            let totalInCents = Int(totalBill * 100)
            let splitAmountInCents = totalInCents / numberOfPeople
            let remainderInCents = totalInCents % numberOfPeople
            print("Each person pays: $\(Double(splitAmountInCents) / 100.0)")
            print("Remaining cents: \(remainderInCents)")
      - type: "heading2"
        content:
          text: "Next Steps"
      - type: "explanation"
        content:
          text: "How could you make this more interactive? Think about how you might get the `billAmount` and `tipPercentage` from user input. What if the number of people changes?"

  - id: "DA8A2B6C-6246-4482-A4A6-18CB39851B24"
    project_name: "Greeting Card Generator"
    project_description: "Make a personalized greeting message by combining text with variables. You'll learn how to create dynamic strings for any occasion."
    project_difficulty: "Easy"
    level_prerequisite: 1
    content_blocks:
      - type: "heading1"
        content:
          text: "Greeting Card Generator"
      - type: "heading2"
        content:
          text: "Project Overview"
      - type: "explanation"
        content:
          text: "In this project, you will create a simple program that generates a personalized greeting. This will introduce you to the concept of string interpolation, a powerful feature in Swift for embedding variables directly within a string."
      - type: "heading2"
        content:
          text: "Core Concepts"
      - type: "explanation"
        content:
          text: "To create a personalized greeting, we need to embed dynamic values like a name and an event into a string. Swift's **string interpolation** `\\(expression)` is perfect for this. We can also join separate pieces of text together, a process called **concatenation**, using the '+' operator."
      - type: "heading2"
        content:
          text: "Implementation"
      - type: "snippet"
        content:
          code: |
            let recipientName = "Alex"
            let event = "Birthday"
            let senderName = "Blake"

            // Using string interpolation
            let message = "Happy \(event), \(recipientName)! Hope you have a great day."
            print(message)

            // Using concatenation
            let signOff = "From, " + senderName
            print(signOff)
      - type: "heading2"
        content:
          text: "Next Steps"
      - type: "explanation"
        content:
          text: "Can you create a function that takes the recipient's name and the event as arguments and returns the greeting message? This would make your code more reusable."

  - id: "4F1B3E3D-4A2D-4B9A-8C3D-1B9E0F7B5D9E"
    project_name: "Smart Thermostat"
    project_description: "Build the logic for a smart thermostat that provides a message based on the current temperature. This project introduces how to make decisions in code."
    project_difficulty: "Easy"
    level_prerequisite: 2
    content_blocks:
      - type: "heading1"
        content:
          text: "Smart Thermostat"
      - type: "heading2"
        content:
          text: "Project Overview"
      - type: "explanation"
        content:
          text: "This project simulates the logic of a smart thermostat. You will learn to use conditional statements to make decisions in your code, a fundamental concept in programming."
      - type: "heading2"
        content:
          text: "Core Concepts"
      - type: "explanation"
        content:
          text: "A smart thermostat needs to react differently based on the temperature. We can achieve this using `if`, `else if`, and `else` statements. These allow your program to check a condition and run a specific block of code if that condition is true."
      - type: "heading2"
        content:
          text: "Implementation"
      - type: "snippet"
        content:
          code: |
            let currentTempCelsius = 22
            if currentTempCelsius > 30 {
              print("It's hot! Turning on the AC.")
            } else if currentTempCelsius < 15 {
              print("It's chilly. Turning on the heat.")
            } else {
              print("The temperature is pleasant. Maintaining current setting.")
            }
      - type: "heading2"
        content:
          text: "Next Steps"
      - type: "explanation"
        content:
          text: "How would you handle a temperature that is exactly 30 or 15? Modify the code to include these edge cases. You could also add more temperature ranges with different messages."

  - id: "9B6A1E3D-5F7C-4C6E-9B8A-1E3D5F7C9B6A"
    project_name: "To-Do List Manager"
    project_description: "Create and display a list of tasks. This project teaches you how to manage collections of items and perform an action for each one."
    project_difficulty: "Medium"
    level_prerequisite: 2
    content_blocks:
      - type: "heading1"
        content:
          text: "To-Do List Manager"
      - type: "heading2"
        content:
          text: "Project Overview"
      - type: "explanation"
        content:
          text: "In this project, you will create a simple to-do list manager. This will introduce you to arrays for storing collections of data and loops for iterating over them."
      - type: "heading2"
        content:
          text: "Core Concepts"
      - type: "explanation"
        content:
          text: "A to-do list is a collection of items. In Swift, we can store an ordered list of items in an **Array**. To display each task, we can iterate, or loop, through the array using a **for-in loop**, which is a clean and efficient way to process every item in a collection."
      - type: "heading2"
        content:
          text: "Implementation"
      - type: "snippet"
        content:
          code: |
            let todoList = ["Finish report", "Buy groceries", "Call the dentist", "Walk the dog"]

            print("--- My To-Do List ---")
            var taskNumber = 1
            for task in todoList {
              print("\(taskNumber). \(task)")
              taskNumber += 1
            }
            print("---------------------")
      - type: "heading2"
        content:
          text: "Next Steps"
      - type: "explanation"
        content:
          text: "Try adding a new task to the `todoList` array. How would you remove a task? Explore the different methods available for Swift arrays."

  - id: "D4C4B5A6-9876-4321-ABCD-FE9876543210"
    project_name: "User Profile Creator"
    project_description: "Store and retrieve user information like name, email, and city. You'll learn to use Dictionaries, which are perfect for storing associated data."
    project_difficulty: "Medium"
    level_prerequisite: 2
    content_blocks:
      - type: "heading1"
        content:
          text: "User Profile Creator"
      - type: "heading2"
        content:
          text: "Project Overview"
      - type: "explanation"
        content:
          text: "This project involves creating a user profile system. You will learn to use dictionaries to store key-value pairs, which is an efficient way to manage data with labels."
      - type: "heading2"
        content:
          text: "Core Concepts"
      - type: "explanation"
        content:
          text: "A user profile consists of pieces of information, each with a label (e.g., 'Email': 'user@example.com'). **Dictionaries** are perfect for this, storing data in **key-value pairs**. This allows you to look up a value using its unique key."
      - type: "heading2"
        content:
          text: "Implementation"
      - type: "snippet"
        content:
          code: |
            var userProfile: [String: String] = [
              "username": "CodeMaster",
              "email": "codemaster@swift.dev",
              "city": "San Francisco"
            ]

            if let username = userProfile["username"] {
                print("Profile for \(username):")
            }

            // Add a new piece of information
            userProfile["status"] = "Online"

            // Print all profile information
            for (key, value) in userProfile {
              print("  \(key): \(value)")
            }
      - type: "heading2"
        content:
          text: "Next Steps"
      - type: "explanation"
        content:
          text: "What other information could you add to the user profile? Try adding an age (which would be an `Int`, not a `String`). How does this change your dictionary declaration?"

  - id: "1E3D5F7C-9B6A-4C6E-9B8A-1E3D5F7C9B6A"
    project_name: "Unit Converter"
    project_description: "Build a set of reusable tools to convert between different units (like miles to kilometers). This project introduces the power of functions to organize code."
    project_difficulty: "Medium"
    level_prerequisite: 3
    content_blocks:
      - type: "heading1"
        content:
          text: "Unit Converter"
      - type: "heading2"
        content:
          text: "Project Overview"
      - type: "explanation"
        content:
          text: "In this project, you will create a set of functions to perform unit conversions. This will teach you how to write reusable code, which is a key principle of good software development."
      - type: "heading2"
        content:
          text: "Core Concepts"
      - type: "explanation"
        content:
          text: "Instead of writing the same conversion logic over and over, we can package it into a reusable block of code called a **function**. Functions can take input values (called **parameters**) and give back a result (a **return value**), making your code clean and efficient."
      - type: "heading2"
        content:
          text: "Implementation"
      - type: "snippet"
        content:
          code: |
            func milesToKilometers(miles: Double) -> Double {
              return miles * 1.60934
            }

            func celsiusToFahrenheit(celsius: Double) -> Double {
              return (celsius * 9 / 5) + 32
            }

            let distanceInMiles = 100.0
            let distanceInKm = milesToKilometers(miles: distanceInMiles)
            print("\(distanceInMiles) miles is equal to \(distanceInKm) kilometers.")

            let tempInCelsius = 25.0
            let tempInFahrenheit = celsiusToFahrenheit(celsius: tempInCelsius)
            print("\(tempInCelsius)°C is equal to \(tempInFahrenheit)°F.")
      - type: "heading2"
        content:
          text: "Next Steps"
      - type: "explanation"
        content:
          text: "Can you write a function to convert from kilometers to miles? What about Fahrenheit to Celsius? Creating pairs of conversion functions is a great way to practice."

  - id: "8C3D1B9E-0F7B-4A2D-4B9A-1B9E0F7B5D9E"
    project_name: "Book Catalog App"
    project_description: "Model a real-world object—a book—in your code. You'll create a custom data type that groups together a book's title, author, and page count."
    project_difficulty: "Medium"
    level_prerequisite: 3
    content_blocks:
      - type: "heading1"
        content:
          text: "Book Catalog App"
      - type: "heading2"
        content:
          text: "Project Overview"
      - type: "explanation"
        content:
          text: "This project will guide you through creating a custom data type for a book. You will learn about structures, which are a fundamental way to model your own data in Swift."
      - type: "heading2"
        content:
          text: "Core Concepts"
      - type: "explanation"
        content:
          text: "To represent a complex item like a book, we can create our own custom type using a **Structure** (or `struct`). A struct lets you group related properties (like `title` and `author`) and even behaviors (like a function to describe the book) into a single, neat package."
      - type: "heading2"
        content:
          text: "Implementation"
      - type: "snippet"
        content:
          code: |
            struct Book {
              var title: String
              var author: String
              var pageCount: Int

              func getDescription() -> String {
                return "'\(title)' by \(author) is \(pageCount) pages long."
              }
            }

            let favoriteBook = Book(title: "The Hobbit", author: "J.R.R. Tolkien", pageCount: 310)
            print(favoriteBook.getDescription())
      - type: "heading2"
        content:
          text: "Next Steps"
      - type: "explanation"
        content:
          text: "Create a few more `Book` instances and store them in an array. Can you loop through the array and print the description of each book?"

  - id: "C3A8E0B3-3C7B-4F1A-9A8E-8B3C1A7F0A9E"
    project_name: "Traffic Light Simulator"
    project_description: "Simulate the behavior of a traffic light. This project shows how to define a set of distinct, related states (red, yellow, green) to make your code safer and more readable."
    project_difficulty: "Medium"
    level_prerequisite: 3
    content_blocks:
      - type: "heading1"
        content:
          text: "Traffic Light Simulator"
      - type: "heading2"
        content:
          text: "Project Overview"
      - type: "explanation"
        content:
          text: "In this project, you will model a traffic light system. This is a great way to learn about enumerations (`enum`), which are used to define a group of related values."
      - type: "heading2"
        content:
          text: "Core Concepts"
      - type: "explanation"
        content:
          text: "A traffic light can only be in one of a few specific states. An **Enumeration** (or `enum`) is the perfect tool for this. It allows you to define a new type with a limited set of possible values, preventing you from accidentally using an invalid state (like 'blue')."
      - type: "heading2"
        content:
          text: "Implementation"
      - type: "snippet"
        content:
          code: |
            enum TrafficLightState {
              case red
              case yellow
              case green
            }

            var currentState = TrafficLightState.green

            func getAction(for state: TrafficLightState) -> String {
              switch state {
              case .red:
                return "Stop"
              case .yellow:
                return "Prepare to stop"
              case .green:
                return "Go"
              }
            }

            print("The light is green. Action: \(getAction(for: currentState))")
            currentState = .yellow
            print("The light is now yellow. Action: \(getAction(for: currentState))")
      - type: "heading2"
        content:
          text: "Next Steps"
      - type: "explanation"
        content:
          text: "Can you add a `.blinkingRed` case to the `TrafficLightState` enum? How would you update the `getAction` function to handle this new case?"
